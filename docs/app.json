[{"name":"app.R","content":"library(shiny)\r\nlibrary(bslib)\r\nlibrary(ggplot2)\r\nlibrary(dplyr)\r\nlibrary(readr)\r\nlibrary(here)\r\nlibrary(tidyr)\r\nlibrary(plotly)\r\nlibrary(janitor)\r\nlibrary(stringr)\r\nlibrary(DT)\r\n\r\n# TODO add instructions on how to use the app\r\n\r\n# TODO fix the tooltips for year totals in open access plot\r\n\r\n# TODO Rename tabs\r\n\r\nmin_year <- 2021\r\nmax_year <- 2025\r\nyears <- min_year:max_year\r\n\r\ndf <- read_csv(here(\"data\", \"stacked_data.csv\"), show_col_types = FALSE) |>\r\n  mutate(year = as.character(year)) |>\r\n  arrange(publisher)\r\npublishers <- unique(df$publisher)\r\n\r\nui <- page_sidebar(\r\n  theme = bs_theme(version = 5, bootswatch = \"flatly\"),\r\n  title = \"Outputs Explorer\",\r\n\r\n  sidebar = sidebar(\r\n    width = \"20%\",\r\n    title = \"Selection Controls\",\r\n    selectInput(\r\n      \"publisher\",\r\n      \"Select publisher:\",\r\n      choices = c(\"All\", publishers)\r\n    ),\r\n    selectInput(\r\n      \"journal\",\r\n      \"Select journal:\",\r\n      choices = c(\"All\")\r\n    ),\r\n    hr(),\r\n    conditionalPanel(\r\n      condition = \"output.has_true_values\",\r\n      radioButtons(\r\n        \"corresponding_filter\",\r\n        \"Choose which outputs to show:\",\r\n        choices = c(\"All\" = FALSE, \"Corresponding authors only\" = TRUE)\r\n      )\r\n    )\r\n  ),\r\n\r\n  navset_card_underline(\r\n    nav_panel(\r\n      \"First tab\",\r\n      layout_columns(\r\n        col_widths = c(7, 5),\r\n        card(\r\n          card_header(\"Open Access\"),\r\n          card_body(\r\n            plotlyOutput(\"openaccess_barChart\")\r\n          )\r\n        ),\r\n        card(\r\n          card_header(\"Summary\"),\r\n          card_body(\r\n            DTOutput(\"tbl_summary\")\r\n          )\r\n        )\r\n      )\r\n    ),\r\n    nav_panel(\"Second tab\", DTOutput(\"data_tbl\"))\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  # Update subcategory choices based on selected category\r\n  observe({\r\n    if (input$publisher == \"All\") {\r\n      updateSelectInput(\r\n        session,\r\n        \"journal\",\r\n        choices = c(\"All\"),\r\n        selected = \"All\"\r\n      )\r\n    } else {\r\n      updateSelectInput(\r\n        session,\r\n        \"journal\",\r\n        choices = c(\r\n          \"All\",\r\n          unique(df$journal[which(df$publisher == input$publisher)])\r\n        ),\r\n        selected = \"All\"\r\n      )\r\n    }\r\n  })\r\n\r\n  # Filter data based on selections\r\n  pj_filtered_data <- reactive({\r\n    if (input$publisher == \"All\") {\r\n      return(df)\r\n    } else if (input$journal == \"All\") {\r\n      return(df |> filter(publisher == input$publisher))\r\n    } else {\r\n      return(\r\n        df |> filter(publisher == input$publisher, journal == input$journal)\r\n      )\r\n    }\r\n  })\r\n\r\n  has_true_values <- reactive({\r\n    any(pj_filtered_data()$uob_is_corresponding == TRUE)\r\n  })\r\n\r\n  output$has_true_values <- reactive({\r\n    has_true_values()\r\n  })\r\n  outputOptions(output, \"has_true_values\", suspendWhenHidden = FALSE)\r\n\r\n  output$test_input <- reactive({\r\n    input$corresponding_filter\r\n  })\r\n\r\n  filtered_data <- reactive({\r\n    dat <- pj_filtered_data()\r\n\r\n    # Only apply the true/false filter if TRUE values exist and corresponding is TRUE\r\n    if (input$corresponding_filter) {\r\n      dat <- dat |> filter(uob_is_corresponding)\r\n    }\r\n    dat\r\n  })\r\n\r\n  # Data for infoboxes\r\n  output$year_range <- renderText({\r\n    year_range_min <- min(filtered_data()$year)\r\n    year_range_max <- max(filtered_data()$year)\r\n    if (year_range_min == year_range_max) {\r\n      return(year_range_min)\r\n    } else {\r\n      return(paste0(year_range_min, \" - \", year_range_max))\r\n    }\r\n  })\r\n\r\n  output$journals <- renderText({\r\n    format(n_distinct(filtered_data()$journal), big.mark = \",\")\r\n  })\r\n\r\n  output$outputs <- renderText({\r\n    format(n_distinct(filtered_data()$doi), big.mark = \",\")\r\n  })\r\n\r\n  output$corresponding <- renderText({\r\n    paste0(\r\n      100 *\r\n        round(\r\n          sum(filtered_data()$uob_is_corresponding) /\r\n            n_distinct(filtered_data()$doi),\r\n          3\r\n        ),\r\n      \"%\"\r\n    )\r\n  })\r\n\r\n  output$pct_oa <- renderText({\r\n    paste0(\r\n      100 *\r\n        round(\r\n          sum(filtered_data()$open_access != \"closed\") /\r\n            n_distinct(filtered_data()$doi),\r\n          3\r\n        ),\r\n      \"%\"\r\n    )\r\n  })\r\n\r\n  # Summary table instead of info boxes\r\n  summary_tbl <- reactive({\r\n    year_range_min <- min(filtered_data()$year)\r\n    year_range_max <- max(filtered_data()$year)\r\n    if (year_range_min == year_range_max) {\r\n      year_range <- year_range_min\r\n    } else {\r\n      year_range <- paste0(year_range_min, \" - \", year_range_max)\r\n    }\r\n\r\n    if (input$publisher == \"All\") {\r\n      publishers <- format(\r\n        n_distinct(filtered_data()$publisher),\r\n        big.mark = \",\"\r\n      )\r\n      publisher_name <- \"Publishers\"\r\n    } else {\r\n      publishers <- input$publisher\r\n      publisher_name <- \"Publisher\"\r\n    }\r\n\r\n    if (input$journal == \"All\") {\r\n      journals <- format(n_distinct(filtered_data()$journal), big.mark = \",\")\r\n      journal_name <- \"Journals\"\r\n    } else {\r\n      journals <- input$journal\r\n      journal_name <- \"Journal\"\r\n    }\r\n\r\n    outputs <- format(n_distinct(filtered_data()$doi), big.mark = \",\")\r\n\r\n    pct_corresponding <- 100 *\r\n      round(\r\n        sum(filtered_data()$uob_is_corresponding) /\r\n          n_distinct(filtered_data()$doi),\r\n        3\r\n      )\r\n\r\n    pct_oa <- 100 *\r\n      round(\r\n        sum(filtered_data()$open_access != \"closed\") /\r\n          n_distinct(filtered_data()$doi),\r\n        3\r\n      )\r\n\r\n    data.frame(\r\n      Variable = c(\r\n        \"Year range\",\r\n        publisher_name,\r\n        journal_name,\r\n        \"Total outputs\",\r\n        \"Open access (%)\",\r\n        \"Corresponding authors (%)\"\r\n      ),\r\n      Value = c(\r\n        year_range,\r\n        publishers,\r\n        journals,\r\n        as.character(outputs),\r\n        as.character(pct_oa),\r\n        as.character(pct_corresponding)\r\n      )\r\n    )\r\n  })\r\n\r\n  output$tbl_summary <- renderDT(\r\n    datatable(\r\n      summary_tbl(),\r\n      rownames = FALSE,\r\n      extensions = \"Buttons\",\r\n      options = list(\r\n        dom = \"B\",\r\n        buttons = c(\"csv\", \"excel\")\r\n      )\r\n    )\r\n  )\r\n\r\n  # Create bar chart\r\n  output$openaccess_barChart <- renderPlotly({\r\n    data <- filtered_data()\r\n\r\n    if (input$publisher == \"All\") {\r\n      # When all publishers are selected, aggregate by year only\r\n      # plot_data <- data |>\r\n      #   group_by(year) |>\r\n      #   tally(n = \"Total\")\r\n\r\n      plot_data <- data |>\r\n        group_by(open_access, year) |>\r\n        tally(n = \"outputs\") |>\r\n        ungroup() |>\r\n        mutate(\r\n          open_access = str_to_title(open_access),\r\n          open_access = factor(\r\n            open_access,\r\n            levels = c(\"Bronze\", \"Gold\", \"Green\", \"Hybrid\", \"Diamond\", \"Closed\")\r\n          )\r\n        ) |>\r\n        clean_names(case = \"sentence\")\r\n\r\n      year_totals <- plot_data |>\r\n        group_by(Year) |>\r\n        summarise(total = sum(Outputs)) |>\r\n        ungroup()\r\n\r\n      if (max(year_totals$total) < 20) {\r\n        major_breaks <- seq(0, 20, 4)\r\n        spacer <- 4\r\n      } else if (max(year_totals$total) < 100) {\r\n        major_breaks <- seq(0, 100, 10)\r\n        spacer <- 10\r\n      } else if (max(year_totals$total) < 1000) {\r\n        major_breaks <- seq(0, 1000, 100)\r\n        spacer <- 25\r\n      } else {\r\n        major_breaks <- seq(0, 10000, 1000)\r\n        spacer <- 50\r\n      }\r\n\r\n      p <- ggplot() +\r\n        geom_text(\r\n          data = year_totals,\r\n          aes(x = Year, y = max(total) + spacer, label = total),\r\n          size = 3.5\r\n        ) +\r\n        geom_bar(\r\n          data = plot_data,\r\n          aes(x = Year, y = Outputs, fill = `Open access`),\r\n          stat = \"identity\"\r\n        ) +\r\n        scale_y_continuous(breaks = major_breaks) +\r\n        scale_fill_manual(\r\n          breaks = c(\"Bronze\", \"Gold\", \"Green\", \"Hybrid\", \"Diamond\", \"Closed\"),\r\n          values = viridis::viridis(6)\r\n        ) +\r\n        labs(title = \"All publishers\", x = \"Year\", y = \"Outputs\") +\r\n        theme_minimal() +\r\n        theme(legend.position = \"bottom\")\r\n      ggplotly(p)\r\n    } else if (input$journal == \"All\") {\r\n      plot_data <- data |>\r\n        group_by(publisher, open_access, year) |>\r\n        tally(n = \"outputs\") |>\r\n        ungroup() |>\r\n        complete(\r\n          publisher,\r\n          open_access,\r\n          year,\r\n          fill = list(outputs = 0)\r\n        ) |>\r\n        mutate(\r\n          open_access = str_to_title(open_access),\r\n          open_access = factor(\r\n            open_access,\r\n            levels = c(\"Bronze\", \"Gold\", \"Green\", \"Hybrid\", \"Diamond\", \"Closed\")\r\n          )\r\n        ) |>\r\n        clean_names(case = \"sentence\")\r\n\r\n      # This will only add zeroes for years in which there are no publications whatsoever,\r\n      # everything else is the responsibility of the above complete command\r\n      for (i in seq_along(years)) {\r\n        current_year <- years[i]\r\n        if (!current_year %in% plot_data$Year) {\r\n          df_temp <- data.frame(\r\n            Publisher = plot_data$Publisher,\r\n            Year = as.character(current_year),\r\n            Outputs = 0\r\n          ) |>\r\n            distinct()\r\n          plot_data <- bind_rows(plot_data, df_temp)\r\n        }\r\n      }\r\n\r\n      year_totals <- plot_data |>\r\n        group_by(Year) |>\r\n        summarise(total = sum(Outputs)) |>\r\n        ungroup()\r\n\r\n      if (max(year_totals$total) < 20) {\r\n        major_breaks <- seq(0, 20, 4)\r\n        spacer <- 2\r\n      } else if (max(year_totals$total) < 100) {\r\n        major_breaks <- seq(0, 100, 10)\r\n        spacer <- 5\r\n      } else if (max(year_totals$total) < 1000) {\r\n        major_breaks <- seq(0, 1000, 100)\r\n        spacer <- 10\r\n      } else {\r\n        major_breaks <- seq(0, 10000, 1000)\r\n        spacer <- 50\r\n      }\r\n\r\n      # Dummy data to stop NA appearing in ggplotly legend\r\n      plot_data <- plot_data |>\r\n        replace_na(list(`Open access` = plot_data$`Open access`[1]))\r\n\r\n      p <- ggplot() +\r\n        geom_text(\r\n          data = year_totals,\r\n          aes(x = Year, y = max(total) + spacer, label = total),\r\n          size = 3.5\r\n        ) +\r\n        geom_bar(\r\n          data = plot_data,\r\n          aes(x = Year, y = Outputs, fill = `Open access`),\r\n          stat = \"identity\"\r\n        ) +\r\n        scale_y_continuous(breaks = major_breaks) +\r\n        scale_fill_manual(\r\n          breaks = c(\"Bronze\", \"Gold\", \"Green\", \"Hybrid\", \"Diamond\", \"Closed\"),\r\n          values = viridis::viridis(6)\r\n        ) +\r\n        labs(\r\n          title = input$publisher,\r\n          x = \"Year\",\r\n          y = \"Outputs\"\r\n        ) +\r\n        theme_minimal() +\r\n        theme(\r\n          legend.position = \"bottom\",\r\n          panel.grid.minor.y = element_blank()\r\n        )\r\n      ggplotly(p)\r\n    } else {\r\n      plot_data <- data |>\r\n        group_by(publisher, journal, open_access, year) |>\r\n        tally(n = \"outputs\") |>\r\n        ungroup() |>\r\n        complete(\r\n          publisher,\r\n          journal,\r\n          open_access,\r\n          year,\r\n          fill = list(outputs = 0)\r\n        ) |>\r\n        mutate(\r\n          open_access = str_to_title(open_access),\r\n          open_access = factor(\r\n            open_access,\r\n            levels = c(\"Bronze\", \"Gold\", \"Green\", \"Hybrid\", \"Diamond\", \"Closed\")\r\n          )\r\n        ) |>\r\n        clean_names(case = \"sentence\")\r\n\r\n      # This will only add zeroes for years in which there are no publications whatsoever,\r\n      # everything else is the responsibility of the above complete command\r\n      for (i in seq_along(years)) {\r\n        current_year <- years[i]\r\n        if (!current_year %in% plot_data$Year) {\r\n          df_temp <- data.frame(\r\n            Publisher = plot_data$Publisher,\r\n            Journal = plot_data$Journal,\r\n            Year = as.character(current_year),\r\n            Outputs = 0\r\n          ) |>\r\n            distinct()\r\n          plot_data <- bind_rows(plot_data, df_temp)\r\n        }\r\n      }\r\n\r\n      year_totals <- plot_data |>\r\n        group_by(Year) |>\r\n        summarise(total = sum(Outputs)) |>\r\n        ungroup()\r\n\r\n      if (max(year_totals$total) < 20) {\r\n        major_breaks <- seq(0, 20, 4)\r\n        spacer <- 2\r\n      } else if (max(year_totals$total) < 100) {\r\n        major_breaks <- seq(0, 100, 10)\r\n        spacer <- 5\r\n      } else if (max(year_totals$total) < 1000) {\r\n        major_breaks <- seq(0, 1000, 100)\r\n        spacer <- 10\r\n      } else {\r\n        major_breaks <- seq(0, 10000, 1000)\r\n        spacer <- 50\r\n      }\r\n\r\n      plot_data <- plot_data |>\r\n        replace_na(list(`Open access` = plot_data$`Open access`[1]))\r\n\r\n      p <- ggplot() +\r\n        geom_text(\r\n          data = year_totals,\r\n          aes(x = Year, y = max(total) + spacer, label = total),\r\n          size = 3.5\r\n        ) +\r\n        geom_bar(\r\n          data = plot_data,\r\n          aes(x = Year, y = Outputs, fill = `Open access`),\r\n          stat = \"identity\"\r\n        ) +\r\n        scale_y_continuous(breaks = major_breaks) +\r\n        scale_fill_manual(\r\n          breaks = c(\"Bronze\", \"Gold\", \"Green\", \"Hybrid\", \"Diamond\", \"Closed\"),\r\n          values = viridis::viridis(6)\r\n        ) +\r\n        labs(\r\n          title = input$journal,\r\n          x = \"Year\",\r\n          y = \"Outputs\"\r\n        ) +\r\n        theme_minimal() +\r\n        theme(\r\n          legend.position = \"bottom\",\r\n          panel.grid.minor.y = element_blank()\r\n        )\r\n\r\n      ggplotly(p)\r\n    }\r\n  })\r\n\r\n  tbl_data <- reactive({\r\n    year_trend <- filtered_data() |>\r\n      select(-doi) |>\r\n      group_by(publisher, journal, year) |>\r\n      tally(n = \"outputs\") |>\r\n      ungroup() |>\r\n      complete(nesting(publisher, journal), year, fill = list(outputs = 0))\r\n\r\n    if (input$publisher != \"All\") {\r\n      for (i in seq_along(years)) {\r\n        current_year <- years[i]\r\n        if (!current_year %in% year_trend$year) {\r\n          df_temp <- data.frame(\r\n            publisher = year_trend$publisher,\r\n            journal = year_trend$journal,\r\n            year = as.character(current_year),\r\n            outputs = 0\r\n          ) |>\r\n            distinct()\r\n          year_trend <- bind_rows(year_trend, df_temp)\r\n        }\r\n      }\r\n    }\r\n\r\n    year_trend <- year_trend |>\r\n      arrange(year) |>\r\n      pivot_wider(\r\n        id_cols = c(publisher, journal),\r\n        names_from = \"year\",\r\n        values_from = \"outputs\"\r\n      )\r\n\r\n    summary_stats <- filtered_data() |>\r\n      group_by(publisher, journal) |>\r\n      summarise(\r\n        total_outputs = n_distinct(doi),\r\n        open_access_pct = 100 *\r\n          round(sum(open_access != \"closed\") / total_outputs, 3),\r\n        uob_is_corresponding_pct = 100 *\r\n          round(sum(uob_is_corresponding) / total_outputs, 3)\r\n      ) |>\r\n      ungroup()\r\n\r\n    inner_join(\r\n      year_trend,\r\n      summary_stats,\r\n      by = c(\"publisher\" = \"publisher\", \"journal\" = \"journal\")\r\n    ) |>\r\n      rename(\r\n        Publisher = publisher,\r\n        Journal = journal,\r\n        `Total outputs` = total_outputs,\r\n        `Open access (%)` = open_access_pct,\r\n        `Corresponding authors (%)` = uob_is_corresponding_pct\r\n      )\r\n  })\r\n\r\n  output$data_tbl <- renderDT(server = FALSE, {\r\n    datatable(\r\n      tbl_data(),\r\n      rownames = FALSE,\r\n      extensions = \"Buttons\",\r\n      options = list(\r\n        columnDefs = list(list(className = \"dt-left\", targets = 0:1)),\r\n        dom = \"Bfrtip\",\r\n        buttons = c(\"csv\", \"excel\")\r\n      )\r\n    ) |>\r\n      formatRound(\r\n        columns = c('Open access (%)', 'Corresponding authors (%)'),\r\n        digits = 1\r\n      )\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
